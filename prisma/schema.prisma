datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"

}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]

}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    content   String   @db.VarChar(280)
    views     Int      @default(0)
    upvotes   Int      @default(0)
    downvotes Int      @default(0)
    nickname  String   @db.VarChar(30)
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model User {
    id                      String    @id @default(cuid())
    name                    String?
    email                   String?   @unique
    emailVerified           DateTime? @default(now()) // todo: remove?
    image                   String?
    accounts                Account[]
    sessions                Session[]
    Message                 Message[]
    viewedMessageIds        String    @default("")
    canViewMessageTimestamp DateTime  @default(now())
    canSendMessageTimestamp DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
